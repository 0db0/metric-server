// Code generated by MockGen. DO NOT EDIT.
// Source: usecases.go

// Package contracts is a generated GoMock package.
package contracts

import (
	context "context"
	dto "metric-server/internal/dto"
	models "metric-server/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCollectUseCase is a mock of CollectUseCase interface.
type MockCollectUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCollectUseCaseMockRecorder
}

// MockCollectUseCaseMockRecorder is the mock recorder for MockCollectUseCase.
type MockCollectUseCaseMockRecorder struct {
	mock *MockCollectUseCase
}

// NewMockCollectUseCase creates a new mock instance.
func NewMockCollectUseCase(ctrl *gomock.Controller) *MockCollectUseCase {
	mock := &MockCollectUseCase{ctrl: ctrl}
	mock.recorder = &MockCollectUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectUseCase) EXPECT() *MockCollectUseCaseMockRecorder {
	return m.recorder
}

// CollectMany mocks base method.
func (m *MockCollectUseCase) CollectMany(ctx context.Context, metrics []dto.CollectDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectMany", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectMany indicates an expected call of CollectMany.
func (mr *MockCollectUseCaseMockRecorder) CollectMany(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMany", reflect.TypeOf((*MockCollectUseCase)(nil).CollectMany), ctx, metrics)
}

// CollectOne mocks base method.
func (m *MockCollectUseCase) CollectOne(ctx context.Context, metric dto.CollectDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectOne", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectOne indicates an expected call of CollectOne.
func (mr *MockCollectUseCaseMockRecorder) CollectOne(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectOne", reflect.TypeOf((*MockCollectUseCase)(nil).CollectOne), ctx, metric)
}

// MockGiveUseCase is a mock of GiveUseCase interface.
type MockGiveUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGiveUseCaseMockRecorder
}

// MockGiveUseCaseMockRecorder is the mock recorder for MockGiveUseCase.
type MockGiveUseCaseMockRecorder struct {
	mock *MockGiveUseCase
}

// NewMockGiveUseCase creates a new mock instance.
func NewMockGiveUseCase(ctrl *gomock.Controller) *MockGiveUseCase {
	mock := &MockGiveUseCase{ctrl: ctrl}
	mock.recorder = &MockGiveUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGiveUseCase) EXPECT() *MockGiveUseCaseMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockGiveUseCase) GetValue(ctx context.Context, dto dto.ValueDto) (models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, dto)
	ret0, _ := ret[0].(models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockGiveUseCaseMockRecorder) GetValue(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockGiveUseCase)(nil).GetValue), ctx, dto)
}
