// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Metric Collector API Support",
            "url": "http://www.swagger.io/support",
            "email": "budkodmv@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/update": {
            "post": {
                "description": "Inserts or updates the value of a metric specified by its type, name, and value.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Insert or update metric value",
                "parameters": [
                    {
                        "description": "Object metric to insert or update",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CollectDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metric value inserted or updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid metric parameters or JSON payload",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update/{metricType}/{metricName}/{metricValue}": {
            "post": {
                "description": "Inserts or updates the value of a metric specified by its type, name, and value.",
                "produces": [
                    "application/json"
                ],
                "summary": "Insert or update metric value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of the metric ('gauge' or 'counter')",
                        "name": "metricType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the metric",
                        "name": "metricName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Value of the metric",
                        "name": "metricValue",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metric value inserted or updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid metric parameters or JSON payload",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/updates": {
            "post": {
                "description": "Bulk inserts or updates metric values.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Bulk insert or update metrics",
                "parameters": [
                    {
                        "description": "Array of metrics to insert or update",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CollectDto"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics inserted or updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid JSON payload or metric parameters",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/value/{metricType}/{metricName}": {
            "get": {
                "description": "Retrieves the value of a metric specified by its type and name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve metric value by type and name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of the metric ('gauge' or 'counter')",
                        "name": "metricType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the metric",
                        "name": "metricName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metric value retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request. Either metric type is unsupported or value is missing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Metric value not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CollectDto": {
            "type": "object",
            "properties": {
                "delta": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8889",
	BasePath:         "/v0.1",
	Schemes:          []string{},
	Title:            "Metric Collector API",
	Description:      "Metrics and Alerting Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
